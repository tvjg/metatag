// Generated by CoffeeScript 1.6.3
var $FRAMES, $FRAMES_2_2, ByteSpec, COM, COMM, EncodedNumericPartTextSpec, EncodedNumericTextSpec, EncodedTextSpec, EncodingSpec, FLAG23_ALTERFILE, FLAG23_ALTERTAG, FLAG23_COMPRESS, FLAG23_ENCRYPT, FLAG23_GROUP, FLAG23_READONLY, FLAG24_ALTERFILE, FLAG24_ALTERTAG, FLAG24_COMPRESS, FLAG24_DATALEN, FLAG24_ENCRYPT, FLAG24_GROUPID, FLAG24_READONLY, FLAG24_UNSYNCH, FRAMES, FRAMES_2_2, Frame, ID3BadUnsynchData, ID3JunkFrameError, MultiSpec, NumericPartTextFrame, NumericTextFrame, StringSpec, TAL, TALB, TBP, TBPM, TCM, TCMP, TCO, TCOM, TCON, TCOP, TCR, TDA, TDAT, TDEN, TDOR, TDRC, TDRL, TDTG, TIM, TIME, TIT1, TIT2, TIT3, TLE, TLEN, TP1, TP2, TP3, TP4, TPA, TPE1, TPE2, TPE3, TPE4, TPOS, TRCK, TRK, TT1, TT2, TT3, TYE, TYER, TextFrame, TimeStampSpec, TimeStampTextFrame, UnicodeDecodeError, ValueError, cls, convert, isString, sprintf, unsynch, _i, _j, _len, _len1, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref34, _ref35, _ref36, _ref37, _ref38, _ref39, _ref4, _ref40, _ref41, _ref42, _ref43, _ref44, _ref45, _ref46, _ref47, _ref48, _ref49, _ref5, _ref50, _ref6, _ref7, _ref8, _ref9,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sprintf = require("sprintf-js").sprintf;

convert = require('../text-encodings');

unsynch = require('./unsynch');

_ref = require('../errors'), ValueError = _ref.ValueError, UnicodeDecodeError = _ref.UnicodeDecodeError;

_ref1 = require('./errors'), ID3JunkFrameError = _ref1.ID3JunkFrameError, ID3BadUnsynchData = _ref1.ID3BadUnsynchData;

_ref2 = require('./framespecs'), ByteSpec = _ref2.ByteSpec, EncodingSpec = _ref2.EncodingSpec, StringSpec = _ref2.StringSpec, MultiSpec = _ref2.MultiSpec, EncodedTextSpec = _ref2.EncodedTextSpec, EncodedNumericTextSpec = _ref2.EncodedNumericTextSpec, EncodedNumericPartTextSpec = _ref2.EncodedNumericPartTextSpec, TimeStampSpec = _ref2.TimeStampSpec;

FLAG23_ALTERTAG = 0x8000;

FLAG23_ALTERFILE = 0x4000;

FLAG23_READONLY = 0x2000;

FLAG23_COMPRESS = 0x0080;

FLAG23_ENCRYPT = 0x0040;

FLAG23_GROUP = 0x0020;

FLAG24_ALTERTAG = 0x4000;

FLAG24_ALTERFILE = 0x2000;

FLAG24_READONLY = 0x1000;

FLAG24_GROUPID = 0x0040;

FLAG24_COMPRESS = 0x0008;

FLAG24_ENCRYPT = 0x0004;

FLAG24_UNSYNCH = 0x0002;

FLAG24_DATALEN = 0x0001;

isString = function(a) {
  return Object.prototype.toString.call(a) === "[object String]";
};

Frame = (function() {
  var nullChars;

  nullChars = /^(?:0{2})+|(?:0{2})+$/g;

  function Frame(fields) {
    var checker, validated, _i, _len, _ref3;
    Object.defineProperty(this, 'FrameID', {
      enumerable: true,
      get: function() {
        return this.constructor.name;
      }
    });
    Object.defineProperty(this, 'HashKey', {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.FrameID;
      }
    });
    if (!(arguments.length > 0)) {
      return this;
    }
    _ref3 = this.framespec;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      checker = _ref3[_i];
      validated = checker.validate(this, fields[checker.name]);
      this[checker.name] = validated;
    }
  }

  Frame.prototype._readData = function(data) {
    var err, odata, spec, value, _i, _len, _ref3, _ref4;
    odata = data;
    _ref3 = this.framespec;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      spec = _ref3[_i];
      if (!(data.length > 0)) {
        throw new ID3JunkFrameError;
      }
      try {
        _ref4 = spec.read(this, data), value = _ref4[0], data = _ref4[1];
      } catch (_error) {
        err = _error;
        if (!(err instanceof UnicodeDecodeError)) {
          throw err;
        }
        throw new ID3JunkFrameError;
      }
      this[spec.name] = value;
    }
    if (data.toString('hex').replace(nullChars, '')) {
      return console.warn("Leftover data: " + this.FrameID + ": ", data, " (from ", odata, ")");
    }
  };

  return Frame;

})();

Frame.toString = function() {
  return this.name;
};

Frame.isValidFrameId = function(frameId) {
  var char, i, isAlphaNumeric, lowerBound, lowerBound1, upperBound, upperBound1, _i, _ref3;
  upperBound = 'Z'.charCodeAt(0);
  lowerBound = 'A'.charCodeAt(0);
  upperBound1 = '9'.charCodeAt(0);
  lowerBound1 = '0'.charCodeAt(0);
  isAlphaNumeric = true;
  for (i = _i = 0, _ref3 = frameId.length; 0 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
    char = frameId.charCodeAt(i);
    if (char <= upperBound && char >= lowerBound) {
      continue;
    } else if (char <= upperBound1 && char >= lowerBound1) {
      continue;
    } else {
      isAlphaNumeric = false;
    }
  }
  return isAlphaNumeric;
};

Frame.fromData = function(cls, id3, tflags, data) {
  var datalen_bytes, err, frame;
  if (4 <= id3.version.minor) {
    if (tflags & FLAG24_ENCRYPT) {
      throw new ID3EncryptionUnsupportedError;
    }
    if (tflags & (FLAG24_COMPRESS | FLAG24_DATALEN)) {
      datalen_bytes = data.slice(0, 4);
      data = data.slice(4);
    }
    if (tflags & FLAG24_UNSYNCH || id3.f_unsynch) {
      try {
        data = unsynch.decode(data);
      } catch (_error) {
        err = _error;
        if (!(err instanceof ValueError)) {
          throw err;
        }
        if (id3.PEDANTIC) {
          throw new ID3BadUnsynchData("" + err.message + ": " + data);
        }
      }
    }
    if (tflags & FLAG24_COMPRESS) {
      true;
    }
  } else if (3 <= id3.version.minor) {
    if (tflags & FLAG23_ENCRYPT) {
      throw new ID3EncryptionUnsupportedError;
    }
    true;
  }
  frame = new cls();
  frame._rawdata = data;
  frame._flags = tflags;
  frame._readData(data);
  return frame;
};

TextFrame = (function(_super) {
  var sep;

  __extends(TextFrame, _super);

  function TextFrame() {
    _ref3 = TextFrame.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  TextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', EncodedTextSpec('text'), sep = '\u0000')];

  TextFrame.prototype.toString = function() {
    return this.text.join('\u0000');
  };

  TextFrame.prototype.valueOf = function() {
    return this.text;
  };

  return TextFrame;

})(Frame);

NumericTextFrame = (function(_super) {
  __extends(NumericTextFrame, _super);

  function NumericTextFrame() {
    _ref4 = NumericTextFrame.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  NumericTextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', EncodedNumericTextSpec('text'), '\u0000')];

  NumericTextFrame.prototype.valueOf = function() {
    return parseInt(this.text[0], 10);
  };

  return NumericTextFrame;

})(TextFrame);

NumericPartTextFrame = (function(_super) {
  __extends(NumericPartTextFrame, _super);

  function NumericPartTextFrame() {
    _ref5 = NumericPartTextFrame.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  NumericPartTextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', EncodedNumericPartTextSpec('text'), '\u0000')];

  NumericPartTextFrame.prototype.valueOf = function() {
    return parseInt(this.text[0].split('/')[0], 10);
  };

  return NumericPartTextFrame;

})(TextFrame);

TimeStampTextFrame = (function(_super) {
  __extends(TimeStampTextFrame, _super);

  function TimeStampTextFrame() {
    _ref6 = TimeStampTextFrame.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  TimeStampTextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', TimeStampSpec('stamp'), ',')];

  TimeStampTextFrame.prototype.toString = function() {
    var stamp;
    return ((function() {
      var _i, _len, _ref7, _results;
      _ref7 = this.text;
      _results = [];
      for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
        stamp = _ref7[_i];
        _results.push(stamp.text);
      }
      return _results;
    }).call(this)).join(',');
  };

  return TimeStampTextFrame;

})(TextFrame);

COMM = (function(_super) {
  __extends(COMM, _super);

  COMM.prototype.framespec = [EncodingSpec('encoding'), StringSpec('lang', 3), EncodedTextSpec('desc'), MultiSpec('text', EncodedTextSpec('text'), '\u0000')];

  function COMM() {
    COMM.__super__.constructor.apply(this, arguments);
    Object.defineProperty(this, 'HashKey', {
      enumerable: true,
      get: function() {
        return sprintf('%s:%s:%s', this.FrameID, this.desc, this.lang);
      }
    });
  }

  return COMM;

})(TextFrame);

TCON = (function(_super) {
  var GENRES, digit, genre_re, startsWithParens, strDigits;

  __extends(TCON, _super);

  GENRES = require('./constants').GENRES;

  strDigits = (function() {
    var _i, _results;
    _results = [];
    for (digit = _i = 0; _i <= 9; digit = ++_i) {
      _results.push(digit.toString());
    }
    return _results;
  })();

  genre_re = /((?:\(([0-9]+|RX|CR)\))*)(.+)?/;

  startsWithParens = /^\(\(/;

  function TCON() {
    TCON.__super__.constructor.apply(this, arguments);
    Object.defineProperty(this, 'genres', {
      get: this.__get_genres,
      set: this.__set_genres
    });
  }

  TCON.prototype.__get_genres = function() {
    var genres;
    genres = [];
    this.text.forEach(function(value) {
      var d, dummy, genreid, genrename, gid, gids, idx, newGenres, notDigits, wholematch, _ref7;
      notDigits = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          d = value[_i];
          if (__indexOf.call(strDigits, d) < 0) {
            _results.push(d);
          }
        }
        return _results;
      })();
      if (value && notDigits.length === 0) {
        idx = +value;
        return genres.push(GENRES[idx] || 'Unknown');
      } else if (value === 'CR') {
        return genres.push('Cover');
      } else if (value === 'RX') {
        return genres.push('Remix');
      } else if (value) {
        newGenres = [];
        _ref7 = value.match(genre_re), wholematch = _ref7[0], genreid = _ref7[1], dummy = _ref7[2], genrename = _ref7[3];
        if (genreid) {
          gids = (function() {
            var _i, _len, _ref8, _results;
            _ref8 = genreid.slice(1, -1).split(')(');
            _results = [];
            for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
              gid = _ref8[_i];
              _results.push(gid);
            }
            return _results;
          })();
          gids.forEach(function(gid) {
            idx = +gid;
            notDigits = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = gid.length; _i < _len; _i++) {
                d = gid[_i];
                if (__indexOf.call(strDigits, d) < 0) {
                  _results.push(d);
                }
              }
              return _results;
            })();
            if (notDigits.length === 0 && idx < GENRES.length) {
              gid = GENRES[idx];
              return newGenres.push(gid);
            } else if (gid === "CR") {
              return newGenres.push('Cover');
            } else if (gid === "RX") {
              return newGenres.push('Remix');
            } else {
              return newGenres.push('Unknown');
            }
          });
        }
        if (genrename) {
          if (startsWithParens.test(genrename)) {
            genrename = genrename.slice(1);
          }
          if (__indexOf.call(newGenres, genrename) < 0) {
            newGenres.push(genrename);
          }
        }
        return genres = genres.concat(newGenres);
      }
    });
    return genres;
  };

  TCON.prototype.__set_genres = function(genres) {
    var genre;
    if (isString(genres)) {
      genres = [genres];
    }
    return this.text = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = genres.length; _i < _len; _i++) {
        genre = genres[_i];
        _results.push(genre);
      }
      return _results;
    })();
  };

  TCON.prototype.__decode = function(value) {
    var enc;
    if (!isString(value)) {
      return value;
    }
    enc = EncodedTextSpec._encodings[this.encoding][0];
    return (convert(value)).from(enc);
  };

  return TCON;

})(TextFrame);

FRAMES = {
  "AENC": "Audio encryption",
  "APIC": "Attached picture",
  "COMR": "Commercial frame",
  "ENCR": "Encryption method registration",
  "EQUA": "Equalization",
  "ETCO": "Event timing codes",
  "GEOB": "General encapsulated object",
  "GRID": "Group identification registration",
  "IPLS": "Involved people list",
  "LINK": "Linked information",
  "MCDI": "Music CD identifier",
  "MLLT": "MPEG location lookup table",
  "OWNE": "Ownership frame",
  "PRIV": "Private frame",
  "PCNT": "Play counter",
  "POPM": "Popularimeter",
  "POSS": "Position synchronisation frame",
  "RBUF": "Recommended buffer size",
  "RVAD": "Relative volume adjustment",
  "RVRB": "Reverb",
  "SYLT": "Synchronized lyric/text",
  "SYTC": "Synchronized tempo codes",
  "TDLY": "Playlist delay",
  "TENC": "Encoded by",
  "TEXT": "Lyricist/Text writer",
  "TFLT": "File type",
  "TKEY": "Initial key",
  "TLAN": "Language(s)",
  "TMED": "Media type",
  "TOAL": "Original album/movie/show title",
  "TOFN": "Original filename",
  "TOLY": "Original lyricist(s)/text writer(s)",
  "TOPE": "Original artist(s)/performer(s)",
  "TORY": "Original release year",
  "TOWN": "File owner/licensee",
  "TPUB": "Publisher",
  "TRDA": "Recording dates",
  "TRSN": "Internet radio station name",
  "TRSO": "Internet radio station owner",
  "TSIZ": "Size",
  "TSRC": "ISRC (international standard recording code)",
  "TSSE": "Software/Hardware and settings used for encoding",
  "TXXX": "User defined text information frame",
  "UFID": "Unique file identifier",
  "USER": "Terms of use",
  "USLT": "Unsychronized lyric/text transcription",
  "WCOM": "Commercial information",
  "WCOP": "Copyright/Legal information",
  "WOAF": "Official audio file webpage",
  "WOAR": "Official artist/performer webpage",
  "WOAS": "Official audio source webpage",
  "WORS": "Official internet radio station homepage",
  "WPAY": "Payment",
  "WPUB": "Publishers official webpage",
  "WXXX": "User defined URL link frame"
};

$FRAMES = [
  TALB = (function(_super) {
    __extends(TALB, _super);

    function TALB() {
      _ref7 = TALB.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return TALB;

  })(TextFrame), TBPM = (function(_super) {
    __extends(TBPM, _super);

    function TBPM() {
      _ref8 = TBPM.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    return TBPM;

  })(NumericTextFrame), TCOM = (function(_super) {
    __extends(TCOM, _super);

    function TCOM() {
      _ref9 = TCOM.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    return TCOM;

  })(TextFrame), TCOP = (function(_super) {
    __extends(TCOP, _super);

    function TCOP() {
      _ref10 = TCOP.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    return TCOP;

  })(TextFrame), TCMP = (function(_super) {
    __extends(TCMP, _super);

    function TCMP() {
      _ref11 = TCMP.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    return TCMP;

  })(NumericTextFrame), TDAT = (function(_super) {
    __extends(TDAT, _super);

    function TDAT() {
      _ref12 = TDAT.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    return TDAT;

  })(TextFrame), TDRC = (function(_super) {
    __extends(TDRC, _super);

    function TDRC() {
      _ref13 = TDRC.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    return TDRC;

  })(TimeStampTextFrame), TIME = (function(_super) {
    __extends(TIME, _super);

    function TIME() {
      _ref14 = TIME.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    return TIME;

  })(TextFrame), TLEN = (function(_super) {
    __extends(TLEN, _super);

    function TLEN() {
      _ref15 = TLEN.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    return TLEN;

  })(NumericTextFrame), TIT1 = (function(_super) {
    __extends(TIT1, _super);

    function TIT1() {
      _ref16 = TIT1.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    return TIT1;

  })(TextFrame), TIT2 = (function(_super) {
    __extends(TIT2, _super);

    function TIT2() {
      _ref17 = TIT2.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    return TIT2;

  })(TextFrame), TIT3 = (function(_super) {
    __extends(TIT3, _super);

    function TIT3() {
      _ref18 = TIT3.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    return TIT3;

  })(TextFrame), TPE1 = (function(_super) {
    __extends(TPE1, _super);

    function TPE1() {
      _ref19 = TPE1.__super__.constructor.apply(this, arguments);
      return _ref19;
    }

    return TPE1;

  })(TextFrame), TPE2 = (function(_super) {
    __extends(TPE2, _super);

    function TPE2() {
      _ref20 = TPE2.__super__.constructor.apply(this, arguments);
      return _ref20;
    }

    return TPE2;

  })(TextFrame), TPE3 = (function(_super) {
    __extends(TPE3, _super);

    function TPE3() {
      _ref21 = TPE3.__super__.constructor.apply(this, arguments);
      return _ref21;
    }

    return TPE3;

  })(TextFrame), TPE4 = (function(_super) {
    __extends(TPE4, _super);

    function TPE4() {
      _ref22 = TPE4.__super__.constructor.apply(this, arguments);
      return _ref22;
    }

    return TPE4;

  })(TextFrame), TPOS = (function(_super) {
    __extends(TPOS, _super);

    function TPOS() {
      _ref23 = TPOS.__super__.constructor.apply(this, arguments);
      return _ref23;
    }

    return TPOS;

  })(NumericPartTextFrame), TRCK = (function(_super) {
    __extends(TRCK, _super);

    function TRCK() {
      _ref24 = TRCK.__super__.constructor.apply(this, arguments);
      return _ref24;
    }

    return TRCK;

  })(NumericPartTextFrame), TYER = (function(_super) {
    __extends(TYER, _super);

    function TYER() {
      _ref25 = TYER.__super__.constructor.apply(this, arguments);
      return _ref25;
    }

    return TYER;

  })(NumericTextFrame), TDEN = (function(_super) {
    __extends(TDEN, _super);

    function TDEN() {
      _ref26 = TDEN.__super__.constructor.apply(this, arguments);
      return _ref26;
    }

    return TDEN;

  })(TimeStampTextFrame), TDOR = (function(_super) {
    __extends(TDOR, _super);

    function TDOR() {
      _ref27 = TDOR.__super__.constructor.apply(this, arguments);
      return _ref27;
    }

    return TDOR;

  })(TimeStampTextFrame), TDRC = (function(_super) {
    __extends(TDRC, _super);

    function TDRC() {
      _ref28 = TDRC.__super__.constructor.apply(this, arguments);
      return _ref28;
    }

    return TDRC;

  })(TimeStampTextFrame), TDRL = (function(_super) {
    __extends(TDRL, _super);

    function TDRL() {
      _ref29 = TDRL.__super__.constructor.apply(this, arguments);
      return _ref29;
    }

    return TDRL;

  })(TimeStampTextFrame), TDTG = (function(_super) {
    __extends(TDTG, _super);

    function TDTG() {
      _ref30 = TDTG.__super__.constructor.apply(this, arguments);
      return _ref30;
    }

    return TDTG;

  })(TimeStampTextFrame), COMM, TCON
];

for (_i = 0, _len = $FRAMES.length; _i < _len; _i++) {
  cls = $FRAMES[_i];
  FRAMES[cls] = cls;
}

FRAMES_2_2 = {
  "BUF": "Recommended buffer size",
  "CNT": "Play counter",
  "CRA": "Audio encryption",
  "CRM": "Encrypted meta frame",
  "ETC": "Event timing codes",
  "EQU": "Equalization",
  "GEO": "General encapsulated object",
  "IPL": "Involved people list",
  "LNK": "Linked information",
  "MCI": "Music CD Identifier",
  "MLL": "MPEG location lookup table",
  "PIC": "Attached picture",
  "POP": "Popularimeter",
  "REV": "Reverb",
  "RVA": "Relative volume adjustment",
  "SLT": "Synchronized lyric/text",
  "STC": "Synced tempo codes",
  "TDY": "Playlist delay",
  "TEN": "Encoded by",
  "TFT": "File type",
  "TKE": "Initial key",
  "TLA": "Language(s)",
  "TMT": "Media type",
  "TOA": "Original artist(s)/performer(s)",
  "TOF": "Original filename",
  "TOL": "Original Lyricist(s)/text writer(s)",
  "TOR": "Original release year",
  "TOT": "Original album/Movie/Show title",
  "TPB": "Publisher",
  "TRC": "ISRC (International Standard Recording Code)",
  "TRD": "Recording dates",
  "TSI": "Size",
  "TSS": "Software/hardware and settings used for encoding",
  "TXT": "Lyricist/text writer",
  "TXX": "User defined text information frame",
  "UFI": "Unique file identifier",
  "ULT": "Unsychronized lyric/text transcription",
  "WAF": "Official audio file webpage",
  "WAR": "Official artist/performer webpage",
  "WAS": "Official audio source webpage",
  "WCM": "Commercial information",
  "WCP": "Copyright/Legal information",
  "WPB": "Publishers official webpage",
  "WXX": "User defined URL link frame"
};

$FRAMES_2_2 = [
  TAL = (function(_super) {
    __extends(TAL, _super);

    function TAL() {
      _ref31 = TAL.__super__.constructor.apply(this, arguments);
      return _ref31;
    }

    return TAL;

  })(TALB), TBP = (function(_super) {
    __extends(TBP, _super);

    function TBP() {
      _ref32 = TBP.__super__.constructor.apply(this, arguments);
      return _ref32;
    }

    return TBP;

  })(TBPM), TCM = (function(_super) {
    __extends(TCM, _super);

    function TCM() {
      _ref33 = TCM.__super__.constructor.apply(this, arguments);
      return _ref33;
    }

    return TCM;

  })(TCOM), TCR = (function(_super) {
    __extends(TCR, _super);

    function TCR() {
      _ref34 = TCR.__super__.constructor.apply(this, arguments);
      return _ref34;
    }

    return TCR;

  })(TCOP), TCO = (function(_super) {
    __extends(TCO, _super);

    function TCO() {
      _ref35 = TCO.__super__.constructor.apply(this, arguments);
      return _ref35;
    }

    return TCO;

  })(TCMP), TDA = (function(_super) {
    __extends(TDA, _super);

    function TDA() {
      _ref36 = TDA.__super__.constructor.apply(this, arguments);
      return _ref36;
    }

    return TDA;

  })(TDAT), TIM = (function(_super) {
    __extends(TIM, _super);

    function TIM() {
      _ref37 = TIM.__super__.constructor.apply(this, arguments);
      return _ref37;
    }

    return TIM;

  })(TIME), TLE = (function(_super) {
    __extends(TLE, _super);

    function TLE() {
      _ref38 = TLE.__super__.constructor.apply(this, arguments);
      return _ref38;
    }

    return TLE;

  })(TLEN), TT1 = (function(_super) {
    __extends(TT1, _super);

    function TT1() {
      _ref39 = TT1.__super__.constructor.apply(this, arguments);
      return _ref39;
    }

    return TT1;

  })(TIT1), TT2 = (function(_super) {
    __extends(TT2, _super);

    function TT2() {
      _ref40 = TT2.__super__.constructor.apply(this, arguments);
      return _ref40;
    }

    return TT2;

  })(TIT2), TT3 = (function(_super) {
    __extends(TT3, _super);

    function TT3() {
      _ref41 = TT3.__super__.constructor.apply(this, arguments);
      return _ref41;
    }

    return TT3;

  })(TIT3), TP1 = (function(_super) {
    __extends(TP1, _super);

    function TP1() {
      _ref42 = TP1.__super__.constructor.apply(this, arguments);
      return _ref42;
    }

    return TP1;

  })(TPE1), TP2 = (function(_super) {
    __extends(TP2, _super);

    function TP2() {
      _ref43 = TP2.__super__.constructor.apply(this, arguments);
      return _ref43;
    }

    return TP2;

  })(TPE2), TP3 = (function(_super) {
    __extends(TP3, _super);

    function TP3() {
      _ref44 = TP3.__super__.constructor.apply(this, arguments);
      return _ref44;
    }

    return TP3;

  })(TPE3), TP4 = (function(_super) {
    __extends(TP4, _super);

    function TP4() {
      _ref45 = TP4.__super__.constructor.apply(this, arguments);
      return _ref45;
    }

    return TP4;

  })(TPE4), TPA = (function(_super) {
    __extends(TPA, _super);

    function TPA() {
      _ref46 = TPA.__super__.constructor.apply(this, arguments);
      return _ref46;
    }

    return TPA;

  })(TPOS), TRK = (function(_super) {
    __extends(TRK, _super);

    function TRK() {
      _ref47 = TRK.__super__.constructor.apply(this, arguments);
      return _ref47;
    }

    return TRK;

  })(TRCK), TYE = (function(_super) {
    __extends(TYE, _super);

    function TYE() {
      _ref48 = TYE.__super__.constructor.apply(this, arguments);
      return _ref48;
    }

    return TYE;

  })(TYER), COM = (function(_super) {
    __extends(COM, _super);

    function COM() {
      _ref49 = COM.__super__.constructor.apply(this, arguments);
      return _ref49;
    }

    return COM;

  })(COMM), TCO = (function(_super) {
    __extends(TCO, _super);

    function TCO() {
      _ref50 = TCO.__super__.constructor.apply(this, arguments);
      return _ref50;
    }

    return TCO;

  })(TCON)
];

for (_j = 0, _len1 = $FRAMES_2_2.length; _j < _len1; _j++) {
  cls = $FRAMES_2_2[_j];
  FRAMES_2_2[cls] = cls;
}

Frame.FRAMES = FRAMES;

Frame.FRAMES_2_2 = FRAMES_2_2;

module.exports = Frame;
