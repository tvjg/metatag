// Generated by CoffeeScript 1.6.3
var $FRAMES, $FRAMES_2_2, ByteSpec, COM, COMM, EncodedNumericPartTextSpec, EncodedNumericTextSpec, EncodedTextSpec, EncodingSpec, FLAG23_ALTERFILE, FLAG23_ALTERTAG, FLAG23_COMPRESS, FLAG23_ENCRYPT, FLAG23_GROUP, FLAG23_READONLY, FLAG24_ALTERFILE, FLAG24_ALTERTAG, FLAG24_COMPRESS, FLAG24_DATALEN, FLAG24_ENCRYPT, FLAG24_GROUPID, FLAG24_READONLY, FLAG24_UNSYNCH, FRAMES, FRAMES_2_2, Frame, ID3TimeStamp, MultiSpec, NumericPartTextFrame, NumericTextFrame, Spec, StringSpec, TAL, TALB, TBP, TBPM, TCM, TCMP, TCO, TCOM, TCOP, TCR, TDA, TDAT, TDEN, TDOR, TDRC, TDRL, TDTG, TIM, TIME, TIT1, TIT2, TIT3, TLE, TLEN, TP1, TP2, TP3, TP4, TPA, TPE1, TPE2, TPE3, TPE4, TPOS, TRCK, TRK, TT1, TT2, TT3, TYE, TYER, TextFrame, TimeStampSpec, TimeStampTextFrame, cls, convert, sprintf, unsynch, _, _i, _j, _len, _len1, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref34, _ref35, _ref36, _ref37, _ref38, _ref39, _ref4, _ref40, _ref41, _ref42, _ref43, _ref44, _ref45, _ref46, _ref47, _ref48, _ref5, _ref6, _ref7, _ref8, _ref9,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

_ = require('underscore');

sprintf = require("sprintf-js").sprintf;

convert = require('./text-encodings');

unsynch = require('./unsynch');

FLAG23_ALTERTAG = 0x8000;

FLAG23_ALTERFILE = 0x4000;

FLAG23_READONLY = 0x2000;

FLAG23_COMPRESS = 0x0080;

FLAG23_ENCRYPT = 0x0040;

FLAG23_GROUP = 0x0020;

FLAG24_ALTERTAG = 0x4000;

FLAG24_ALTERFILE = 0x2000;

FLAG24_READONLY = 0x1000;

FLAG24_GROUPID = 0x0040;

FLAG24_COMPRESS = 0x0008;

FLAG24_ENCRYPT = 0x0004;

FLAG24_UNSYNCH = 0x0002;

FLAG24_DATALEN = 0x0001;

Frame = (function() {
  function Frame() {
    var blah, checker, kwargs, validated, _i, _len, _ref;
    Object.defineProperty(this, 'FrameID', {
      enumerable: true,
      get: function() {
        return this.constructor.name;
      }
    });
    Object.defineProperty(this, 'HashKey', {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.FrameID;
      }
    });
    if (!(arguments.length > 0)) {
      return this;
    }
    if (false) {
      blah = false;
    } else {
      kwargs = arguments[0];
      _ref = this.framespec;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checker = _ref[_i];
        validated = checker.validate(this, kwargs[checker.name]);
        this[checker.name] = validated;
      }
    }
  }

  Frame.prototype._readData = function(data) {
    var odata, spec, value, _i, _len, _ref, _ref1, _results;
    odata = data;
    _ref = this.framespec;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      spec = _ref[_i];
      if (!(data.length > 0)) {
        throw new Error('ID3JunkFrameError');
      }
      _ref1 = spec.read(this, data), value = _ref1[0], data = _ref1[1];
      _results.push(this[spec.name] = value);
    }
    return _results;
  };

  return Frame;

})();

Frame.toString = function() {
  return this.name;
};

Frame.isValidFrameId = function(frameId) {
  var char, i, isAlphaNumeric, lowerBound, lowerBound1, upperBound, upperBound1, _i, _ref;
  upperBound = 'Z'.charCodeAt(0);
  lowerBound = 'A'.charCodeAt(0);
  upperBound1 = '9'.charCodeAt(0);
  lowerBound1 = '0'.charCodeAt(0);
  isAlphaNumeric = true;
  for (i = _i = 0, _ref = frameId.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    char = frameId.charCodeAt(i);
    if (char <= upperBound && char >= lowerBound) {
      continue;
    } else if (char <= upperBound1 && char >= lowerBound1) {
      continue;
    } else {
      isAlphaNumeric = false;
    }
  }
  return isAlphaNumeric;
};

Frame.fromData = function(cls, id3, tflags, data) {
  var err, frame;
  if (4 <= id3.version.minor) {
    if (tflags & FLAG24_UNSYNCH || id3.f_unsynch) {
      try {
        data = unsynch.decode(data);
      } catch (_error) {
        err = _error;
      }
    }
  } else if (3 <= id3.version.minor) {
    true;
  }
  frame = new cls();
  frame._rawdata = data;
  frame._readData(data);
  return frame;
};

Spec = (function() {
  function Spec(name) {
    this.name = name;
  }

  return Spec;

})();

ByteSpec = (function(_super) {
  __extends(ByteSpec, _super);

  function ByteSpec(name) {
    if (!(this instanceof ByteSpec)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(ByteSpec, arguments, function(){});
    }
    ByteSpec.__super__.constructor.call(this, name);
  }

  ByteSpec.prototype.read = function(frame, data) {
    return [data.toString('utf8', 0, 1).charCodeAt(0), data.slice(1)];
  };

  ByteSpec.prototype.validate = function(frame, value) {
    return value;
  };

  return ByteSpec;

})(Spec);

EncodingSpec = (function(_super) {
  __extends(EncodingSpec, _super);

  function EncodingSpec(name) {
    if (!(this instanceof EncodingSpec)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(EncodingSpec, arguments, function(){});
    }
    EncodingSpec.__super__.constructor.call(this, name);
  }

  EncodingSpec.prototype.read = function(frame, data) {
    var enc, _ref;
    _ref = EncodingSpec.__super__.read.apply(this, arguments), enc = _ref[0], data = _ref[1];
    if (enc < 16) {
      return [enc, data];
    } else {
      return [0, String.fromCharCode(enc) + data];
    }
  };

  EncodingSpec.prototype.validate = function(frame, value) {
    if ((0 <= value && value <= 3)) {
      return value;
    }
    if (!value) {
      return null;
    }
    throw new Error("Invalid Encoding: " + value);
  };

  return EncodingSpec;

})(ByteSpec);

StringSpec = (function(_super) {
  __extends(StringSpec, _super);

  function StringSpec(name, length) {
    if (!(this instanceof StringSpec)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(StringSpec, arguments, function(){});
    }
    this.len = length;
    StringSpec.__super__.constructor.call(this, name);
  }

  StringSpec.prototype.read = function(frame, data) {
    return [data.slice(0, this.len), data.slice(this.len)];
  };

  StringSpec.prototype.validate = function(frame, value) {
    if (value === null) {
      return null;
    }
    if (_.isString(value) && value.length === this.len) {
      return value;
    }
    throw new RangeError(sprintf('Invalid StringSpec[%d] data: %s', this.len, value));
  };

  return StringSpec;

})(Spec);

MultiSpec = (function(_super) {
  __extends(MultiSpec, _super);

  function MultiSpec() {
    var name, sep, specs, _i;
    name = arguments[0], specs = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), sep = arguments[_i++];
    if (!(this instanceof MultiSpec)) {
      Array.prototype.unshift.call(arguments, null);
      return new (Function.prototype.bind.apply(MultiSpec, arguments));
    }
    this.specs = specs;
    this.sep = sep;
    MultiSpec.__super__.constructor.call(this, name);
  }

  MultiSpec.prototype.read = function(frame, data) {
    var record, spec, value, values, _i, _len, _ref, _ref1;
    values = [];
    while (data.length) {
      record = [];
      _ref = this.specs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spec = _ref[_i];
        _ref1 = spec.read(frame, data), value = _ref1[0], data = _ref1[1];
        record.push(value);
      }
      if (this.specs.length !== 1) {
        values.push(record);
      } else {
        values.push(record[0]);
      }
    }
    return [values, data];
  };

  MultiSpec.prototype.validate = function(frame, value) {
    var v;
    if (!value) {
      return [];
    }
    if (this.sep && _.isString(value)) {
      value = value.split(this.sep);
    }
    if (_.isArray(value)) {
      if (this.specs.length === 1) {
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            v = value[_i];
            _results.push(this.specs[0].validate(frame, v));
          }
          return _results;
        }).call(this);
      }
      throw new Error("Invalid MultiSpec data: " + value);
    }
  };

  return MultiSpec;

})(Spec);

EncodedTextSpec = (function(_super) {
  __extends(EncodedTextSpec, _super);

  function EncodedTextSpec(name) {
    if (!(this instanceof EncodedTextSpec)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(EncodedTextSpec, arguments, function(){});
    }
    this._encodings = [['latin1', '00'], ['utf16', '0000'], ['utf16be', '0000'], ['utf8', '00']];
    EncodedTextSpec.__super__.constructor.call(this, name);
  }

  EncodedTextSpec.prototype.read = function(frame, data) {
    var encoding, grouping, hexArr, hexStr, offset, ret, stringOffset, term, _ref, _ref1;
    _ref = this._encodings[frame.encoding], encoding = _ref[0], term = _ref[1];
    hexStr = data.toString('hex');
    grouping = term.length === 2 ? /(.{2})/g : /(.{4})/g;
    hexArr = hexStr.match(grouping);
    ret = '';
    offset = hexArr.indexOf(term);
    if (offset !== -1) {
      stringOffset = offset * term.length;
      _ref1 = [hexStr.slice(0, stringOffset), hexStr.slice(stringOffset + term.length)], data = _ref1[0], ret = _ref1[1];
    }
    if (typeof data === 'string') {
      data = new Buffer(data, 'hex');
    }
    ret = new Buffer(ret, 'hex');
    if (data.length < (term.length / 2)) {
      return ['', ret];
    }
    return [(convert(data)).from(encoding), ret];
  };

  EncodedTextSpec.prototype.validate = function(frame, value) {
    return value;
  };

  return EncodedTextSpec;

})(Spec);

EncodedNumericTextSpec = (function(_super) {
  __extends(EncodedNumericTextSpec, _super);

  function EncodedNumericTextSpec() {
    _ref = EncodedNumericTextSpec.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  return EncodedNumericTextSpec;

})(EncodedTextSpec);

EncodedNumericPartTextSpec = (function(_super) {
  __extends(EncodedNumericPartTextSpec, _super);

  function EncodedNumericPartTextSpec() {
    _ref1 = EncodedNumericPartTextSpec.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  return EncodedNumericPartTextSpec;

})(EncodedTextSpec);

ID3TimeStamp = (function() {
  function ID3TimeStamp(text) {
    Object.defineProperty(this, 'text', {
      enumerable: true,
      get: function() {
        var formats, idx, part, parts, pieces, seps, _i, _len;
        formats = ['%04d', '%02d', '%02d', '%02d', '%02d', '%02d'];
        seps = ['-', '-', ' ', ':', ':', 'x'];
        parts = [this.year, this.month, this.day, this.hour, this.minute, this.second];
        pieces = [];
        for (idx = _i = 0, _len = parts.length; _i < _len; idx = ++_i) {
          part = parts[idx];
          if (part !== null) {
            pieces.push(sprintf(formats[idx], part) + seps[idx]);
          }
        }
        return pieces.join('').slice(0, -1);
      },
      set: function(text) {
        var splitre, unit, units, v, values, _ref2, _results;
        splitre = /[-T:/.]|\s+/;
        units = 'year month day hour minute second'.split(' ');
        values = (text + ':::::').split(splitre).slice(0, 6);
        _ref2 = _.object(units, values);
        _results = [];
        for (unit in _ref2) {
          v = _ref2[unit];
          v = parseInt(v, 10);
          if (_.isNaN(v)) {
            v = null;
          }
          _results.push(this[unit] = v);
        }
        return _results;
      }
    });
    if (text instanceof ID3TimeStamp) {
      text = text.text;
    }
    this.text = text;
  }

  ID3TimeStamp.prototype.toString = function() {
    return this.text;
  };

  ID3TimeStamp.prototype.valueOf = function() {
    return this.text;
  };

  return ID3TimeStamp;

})();

TimeStampSpec = (function(_super) {
  __extends(TimeStampSpec, _super);

  function TimeStampSpec(name) {
    if (!(this instanceof TimeStampSpec)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(TimeStampSpec, arguments, function(){});
    }
    TimeStampSpec.__super__.constructor.call(this, name);
  }

  TimeStampSpec.prototype.read = function(frame, data) {
    var value, _ref2;
    _ref2 = TimeStampSpec.__super__.read.apply(this, arguments), value = _ref2[0], data = _ref2[1];
    return [this.validate(frame, value), data];
  };

  TimeStampSpec.prototype.validate = function(frame, value) {
    var err;
    try {
      return new ID3TimeStamp(value);
    } catch (_error) {
      err = _error;
      throw new RangeError("Invalid ID3TimeStamp: " + value);
    }
  };

  return TimeStampSpec;

})(EncodedTextSpec);

TextFrame = (function(_super) {
  var sep;

  __extends(TextFrame, _super);

  function TextFrame() {
    _ref2 = TextFrame.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  TextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', EncodedTextSpec('text'), sep = '\u0000')];

  TextFrame.prototype.toString = function() {
    return this.text.join('\u0000');
  };

  TextFrame.prototype.valueOf = function() {
    return this.text;
  };

  return TextFrame;

})(Frame);

NumericTextFrame = (function(_super) {
  __extends(NumericTextFrame, _super);

  function NumericTextFrame() {
    _ref3 = NumericTextFrame.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  NumericTextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', EncodedNumericTextSpec('text'), '\u0000')];

  NumericTextFrame.prototype.valueOf = function() {
    return parseInt(this.text[0], 10);
  };

  return NumericTextFrame;

})(TextFrame);

NumericPartTextFrame = (function(_super) {
  __extends(NumericPartTextFrame, _super);

  function NumericPartTextFrame() {
    _ref4 = NumericPartTextFrame.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  NumericPartTextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', EncodedNumericPartTextSpec('text'), '\u0000')];

  NumericPartTextFrame.prototype.valueOf = function() {
    return parseInt(this.text[0].split('/')[0], 10);
  };

  return NumericPartTextFrame;

})(TextFrame);

TimeStampTextFrame = (function(_super) {
  __extends(TimeStampTextFrame, _super);

  function TimeStampTextFrame() {
    _ref5 = TimeStampTextFrame.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  TimeStampTextFrame.prototype.framespec = [EncodingSpec('encoding'), MultiSpec('text', TimeStampSpec('stamp'), ',')];

  TimeStampTextFrame.prototype.toString = function() {
    var stamp;
    return ((function() {
      var _i, _len, _ref6, _results;
      _ref6 = this.text;
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        stamp = _ref6[_i];
        _results.push(stamp.text);
      }
      return _results;
    }).call(this)).join(',');
  };

  return TimeStampTextFrame;

})(TextFrame);

COMM = (function(_super) {
  __extends(COMM, _super);

  COMM.prototype.framespec = [EncodingSpec('encoding'), StringSpec('lang', 3), EncodedTextSpec('desc'), MultiSpec('text', EncodedTextSpec('text'), '\u0000')];

  function COMM() {
    COMM.__super__.constructor.apply(this, arguments);
    Object.defineProperty(this, 'HashKey', {
      enumerable: true,
      get: function() {
        return sprintf('%s:%s:%s', this.FrameID, this.desc, this.lang);
      }
    });
  }

  return COMM;

})(TextFrame);

FRAMES = {
  "AENC": "Audio encryption",
  "APIC": "Attached picture",
  "COMR": "Commercial frame",
  "ENCR": "Encryption method registration",
  "EQUA": "Equalization",
  "ETCO": "Event timing codes",
  "GEOB": "General encapsulated object",
  "GRID": "Group identification registration",
  "IPLS": "Involved people list",
  "LINK": "Linked information",
  "MCDI": "Music CD identifier",
  "MLLT": "MPEG location lookup table",
  "OWNE": "Ownership frame",
  "PRIV": "Private frame",
  "PCNT": "Play counter",
  "POPM": "Popularimeter",
  "POSS": "Position synchronisation frame",
  "RBUF": "Recommended buffer size",
  "RVAD": "Relative volume adjustment",
  "RVRB": "Reverb",
  "SYLT": "Synchronized lyric/text",
  "SYTC": "Synchronized tempo codes",
  "TCON": "Content type",
  "TDLY": "Playlist delay",
  "TENC": "Encoded by",
  "TEXT": "Lyricist/Text writer",
  "TFLT": "File type",
  "TKEY": "Initial key",
  "TLAN": "Language(s)",
  "TMED": "Media type",
  "TOAL": "Original album/movie/show title",
  "TOFN": "Original filename",
  "TOLY": "Original lyricist(s)/text writer(s)",
  "TOPE": "Original artist(s)/performer(s)",
  "TORY": "Original release year",
  "TOWN": "File owner/licensee",
  "TPUB": "Publisher",
  "TRDA": "Recording dates",
  "TRSN": "Internet radio station name",
  "TRSO": "Internet radio station owner",
  "TSIZ": "Size",
  "TSRC": "ISRC (international standard recording code)",
  "TSSE": "Software/Hardware and settings used for encoding",
  "TXXX": "User defined text information frame",
  "UFID": "Unique file identifier",
  "USER": "Terms of use",
  "USLT": "Unsychronized lyric/text transcription",
  "WCOM": "Commercial information",
  "WCOP": "Copyright/Legal information",
  "WOAF": "Official audio file webpage",
  "WOAR": "Official artist/performer webpage",
  "WOAS": "Official audio source webpage",
  "WORS": "Official internet radio station homepage",
  "WPAY": "Payment",
  "WPUB": "Publishers official webpage",
  "WXXX": "User defined URL link frame"
};

$FRAMES = [
  TALB = (function(_super) {
    __extends(TALB, _super);

    function TALB() {
      _ref6 = TALB.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    return TALB;

  })(TextFrame), TBPM = (function(_super) {
    __extends(TBPM, _super);

    function TBPM() {
      _ref7 = TBPM.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return TBPM;

  })(NumericTextFrame), TCOM = (function(_super) {
    __extends(TCOM, _super);

    function TCOM() {
      _ref8 = TCOM.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    return TCOM;

  })(TextFrame), TCOP = (function(_super) {
    __extends(TCOP, _super);

    function TCOP() {
      _ref9 = TCOP.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    return TCOP;

  })(TextFrame), TCMP = (function(_super) {
    __extends(TCMP, _super);

    function TCMP() {
      _ref10 = TCMP.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    return TCMP;

  })(NumericTextFrame), TDAT = (function(_super) {
    __extends(TDAT, _super);

    function TDAT() {
      _ref11 = TDAT.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    return TDAT;

  })(TextFrame), TDRC = (function(_super) {
    __extends(TDRC, _super);

    function TDRC() {
      _ref12 = TDRC.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    return TDRC;

  })(TimeStampTextFrame), TIME = (function(_super) {
    __extends(TIME, _super);

    function TIME() {
      _ref13 = TIME.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    return TIME;

  })(TextFrame), TLEN = (function(_super) {
    __extends(TLEN, _super);

    function TLEN() {
      _ref14 = TLEN.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    return TLEN;

  })(NumericTextFrame), TIT1 = (function(_super) {
    __extends(TIT1, _super);

    function TIT1() {
      _ref15 = TIT1.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    return TIT1;

  })(TextFrame), TIT2 = (function(_super) {
    __extends(TIT2, _super);

    function TIT2() {
      _ref16 = TIT2.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    return TIT2;

  })(TextFrame), TIT3 = (function(_super) {
    __extends(TIT3, _super);

    function TIT3() {
      _ref17 = TIT3.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    return TIT3;

  })(TextFrame), TPE1 = (function(_super) {
    __extends(TPE1, _super);

    function TPE1() {
      _ref18 = TPE1.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    return TPE1;

  })(TextFrame), TPE2 = (function(_super) {
    __extends(TPE2, _super);

    function TPE2() {
      _ref19 = TPE2.__super__.constructor.apply(this, arguments);
      return _ref19;
    }

    return TPE2;

  })(TextFrame), TPE3 = (function(_super) {
    __extends(TPE3, _super);

    function TPE3() {
      _ref20 = TPE3.__super__.constructor.apply(this, arguments);
      return _ref20;
    }

    return TPE3;

  })(TextFrame), TPE4 = (function(_super) {
    __extends(TPE4, _super);

    function TPE4() {
      _ref21 = TPE4.__super__.constructor.apply(this, arguments);
      return _ref21;
    }

    return TPE4;

  })(TextFrame), TPOS = (function(_super) {
    __extends(TPOS, _super);

    function TPOS() {
      _ref22 = TPOS.__super__.constructor.apply(this, arguments);
      return _ref22;
    }

    return TPOS;

  })(NumericPartTextFrame), TRCK = (function(_super) {
    __extends(TRCK, _super);

    function TRCK() {
      _ref23 = TRCK.__super__.constructor.apply(this, arguments);
      return _ref23;
    }

    return TRCK;

  })(NumericPartTextFrame), TYER = (function(_super) {
    __extends(TYER, _super);

    function TYER() {
      _ref24 = TYER.__super__.constructor.apply(this, arguments);
      return _ref24;
    }

    return TYER;

  })(NumericTextFrame), TDEN = (function(_super) {
    __extends(TDEN, _super);

    function TDEN() {
      _ref25 = TDEN.__super__.constructor.apply(this, arguments);
      return _ref25;
    }

    return TDEN;

  })(TimeStampTextFrame), TDOR = (function(_super) {
    __extends(TDOR, _super);

    function TDOR() {
      _ref26 = TDOR.__super__.constructor.apply(this, arguments);
      return _ref26;
    }

    return TDOR;

  })(TimeStampTextFrame), TDRC = (function(_super) {
    __extends(TDRC, _super);

    function TDRC() {
      _ref27 = TDRC.__super__.constructor.apply(this, arguments);
      return _ref27;
    }

    return TDRC;

  })(TimeStampTextFrame), TDRL = (function(_super) {
    __extends(TDRL, _super);

    function TDRL() {
      _ref28 = TDRL.__super__.constructor.apply(this, arguments);
      return _ref28;
    }

    return TDRL;

  })(TimeStampTextFrame), TDTG = (function(_super) {
    __extends(TDTG, _super);

    function TDTG() {
      _ref29 = TDTG.__super__.constructor.apply(this, arguments);
      return _ref29;
    }

    return TDTG;

  })(TimeStampTextFrame), COMM
];

for (_i = 0, _len = $FRAMES.length; _i < _len; _i++) {
  cls = $FRAMES[_i];
  FRAMES[cls] = cls;
}

FRAMES_2_2 = {
  "BUF": "Recommended buffer size",
  "CNT": "Play counter",
  "CRA": "Audio encryption",
  "CRM": "Encrypted meta frame",
  "ETC": "Event timing codes",
  "EQU": "Equalization",
  "GEO": "General encapsulated object",
  "IPL": "Involved people list",
  "LNK": "Linked information",
  "MCI": "Music CD Identifier",
  "MLL": "MPEG location lookup table",
  "PIC": "Attached picture",
  "POP": "Popularimeter",
  "REV": "Reverb",
  "RVA": "Relative volume adjustment",
  "SLT": "Synchronized lyric/text",
  "STC": "Synced tempo codes",
  "TCO": "Content type",
  "TDY": "Playlist delay",
  "TEN": "Encoded by",
  "TFT": "File type",
  "TKE": "Initial key",
  "TLA": "Language(s)",
  "TMT": "Media type",
  "TOA": "Original artist(s)/performer(s)",
  "TOF": "Original filename",
  "TOL": "Original Lyricist(s)/text writer(s)",
  "TOR": "Original release year",
  "TOT": "Original album/Movie/Show title",
  "TPB": "Publisher",
  "TRC": "ISRC (International Standard Recording Code)",
  "TRD": "Recording dates",
  "TSI": "Size",
  "TSS": "Software/hardware and settings used for encoding",
  "TXT": "Lyricist/text writer",
  "TXX": "User defined text information frame",
  "UFI": "Unique file identifier",
  "ULT": "Unsychronized lyric/text transcription",
  "WAF": "Official audio file webpage",
  "WAR": "Official artist/performer webpage",
  "WAS": "Official audio source webpage",
  "WCM": "Commercial information",
  "WCP": "Copyright/Legal information",
  "WPB": "Publishers official webpage",
  "WXX": "User defined URL link frame"
};

$FRAMES_2_2 = [
  TAL = (function(_super) {
    __extends(TAL, _super);

    function TAL() {
      _ref30 = TAL.__super__.constructor.apply(this, arguments);
      return _ref30;
    }

    return TAL;

  })(TALB), TBP = (function(_super) {
    __extends(TBP, _super);

    function TBP() {
      _ref31 = TBP.__super__.constructor.apply(this, arguments);
      return _ref31;
    }

    return TBP;

  })(TBPM), TCM = (function(_super) {
    __extends(TCM, _super);

    function TCM() {
      _ref32 = TCM.__super__.constructor.apply(this, arguments);
      return _ref32;
    }

    return TCM;

  })(TCOM), TCR = (function(_super) {
    __extends(TCR, _super);

    function TCR() {
      _ref33 = TCR.__super__.constructor.apply(this, arguments);
      return _ref33;
    }

    return TCR;

  })(TCOP), TCO = (function(_super) {
    __extends(TCO, _super);

    function TCO() {
      _ref34 = TCO.__super__.constructor.apply(this, arguments);
      return _ref34;
    }

    return TCO;

  })(TCMP), TDA = (function(_super) {
    __extends(TDA, _super);

    function TDA() {
      _ref35 = TDA.__super__.constructor.apply(this, arguments);
      return _ref35;
    }

    return TDA;

  })(TDAT), TIM = (function(_super) {
    __extends(TIM, _super);

    function TIM() {
      _ref36 = TIM.__super__.constructor.apply(this, arguments);
      return _ref36;
    }

    return TIM;

  })(TIME), TLE = (function(_super) {
    __extends(TLE, _super);

    function TLE() {
      _ref37 = TLE.__super__.constructor.apply(this, arguments);
      return _ref37;
    }

    return TLE;

  })(TLEN), TT1 = (function(_super) {
    __extends(TT1, _super);

    function TT1() {
      _ref38 = TT1.__super__.constructor.apply(this, arguments);
      return _ref38;
    }

    return TT1;

  })(TIT1), TT2 = (function(_super) {
    __extends(TT2, _super);

    function TT2() {
      _ref39 = TT2.__super__.constructor.apply(this, arguments);
      return _ref39;
    }

    return TT2;

  })(TIT2), TT3 = (function(_super) {
    __extends(TT3, _super);

    function TT3() {
      _ref40 = TT3.__super__.constructor.apply(this, arguments);
      return _ref40;
    }

    return TT3;

  })(TIT3), TP1 = (function(_super) {
    __extends(TP1, _super);

    function TP1() {
      _ref41 = TP1.__super__.constructor.apply(this, arguments);
      return _ref41;
    }

    return TP1;

  })(TPE1), TP2 = (function(_super) {
    __extends(TP2, _super);

    function TP2() {
      _ref42 = TP2.__super__.constructor.apply(this, arguments);
      return _ref42;
    }

    return TP2;

  })(TPE2), TP3 = (function(_super) {
    __extends(TP3, _super);

    function TP3() {
      _ref43 = TP3.__super__.constructor.apply(this, arguments);
      return _ref43;
    }

    return TP3;

  })(TPE3), TP4 = (function(_super) {
    __extends(TP4, _super);

    function TP4() {
      _ref44 = TP4.__super__.constructor.apply(this, arguments);
      return _ref44;
    }

    return TP4;

  })(TPE4), TPA = (function(_super) {
    __extends(TPA, _super);

    function TPA() {
      _ref45 = TPA.__super__.constructor.apply(this, arguments);
      return _ref45;
    }

    return TPA;

  })(TPOS), TRK = (function(_super) {
    __extends(TRK, _super);

    function TRK() {
      _ref46 = TRK.__super__.constructor.apply(this, arguments);
      return _ref46;
    }

    return TRK;

  })(TRCK), TYE = (function(_super) {
    __extends(TYE, _super);

    function TYE() {
      _ref47 = TYE.__super__.constructor.apply(this, arguments);
      return _ref47;
    }

    return TYE;

  })(TYER), COM = (function(_super) {
    __extends(COM, _super);

    function COM() {
      _ref48 = COM.__super__.constructor.apply(this, arguments);
      return _ref48;
    }

    return COM;

  })(COMM)
];

for (_j = 0, _len1 = $FRAMES_2_2.length; _j < _len1; _j++) {
  cls = $FRAMES_2_2[_j];
  FRAMES_2_2[cls] = cls;
}

Frame.FRAMES = FRAMES;

Frame.FRAMES_2_2 = FRAMES_2_2;

module.exports = Frame;
